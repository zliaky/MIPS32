`include "defines.v"

module wishbone_bus(
	input		wire					clk,
	input		wire					rst,

	//来自ctrl模块
	input		wire[5:0]				stall_i,
	input		wire					flush_i,

	//IF模块的接口
	input		wire					if_ce_i,
	input		wire[`RegBus]			if_data_i,
	input		wire[`RegBus]			if_addr_i,
	input		wire					if_we_i,
	input		wire[3:0]				if_sel_i,
	output		reg[`RegBus]			if_data_o,

	output		reg						stall_req_if,

	//MEM模块的接口
	input		wire					mem_ce_i,
	input		wire[`RegBus]			mem_data_i,
	input		wire[`RegBus]			mem_addr_i,
	input		wire					mem_we_i,
	input		wire[3:0]				mem_sel_i,
	output		reg[`RegBus]			mem_data_o,

	output		reg						stall_req_mem,

	//TLB模块的接口
	output		reg						tlb_ce,
	output		reg						tlb_write_o,
	output		reg[`RegBus]			tlb_addr_o,

	//MMU模块的接口
	input		wire[`RegBus]			mmu_addr_i,
	input		wire[15:0]				mmu_select_i,

	//Wishbone侧的接口
	output		reg[`RegBus]			wishbone_data_o,
	output		reg[`RegBus]			wishbone_addr_o,
	output		reg						wishbone_we_o,
	output		reg[15:0]				wishbone_select_o,
	input		wire[`RegBus]			wishbone_data_i,
	input		wire					wishbone_ack_i
	);

	reg[`RegBus] mem_wdata;

	reg	if_ack;
	reg	memw_ack;
	reg memr_ack;

	reg state_next;
	reg[2:0] register;
	
	always @ (*) begin
		if ((rst == `RstEnable) || (flush_i == `True_v)) begin
			wishbone_data_o <= `ZeroWord;
			wishbone_addr_o <= `ZeroWord;
			wishbone_we_o <= `WriteDisable;
			wishbone_select_o <= `WB_SELECT_ZERO;
		end else begin
			if (if_ack == `False_v) begin
				wishbone_data_o <= `ZeroWord;
				wishbone_addr_o <= mmu_addr_i;
				wishbone_we_o <= `WriteDisable;
				wishbone_select_o <= mmu_select_i;
			end else if (memr_ack == `False_v) begin
				wishbone_data_o <= `ZeroWord;
				wishbone_addr_o <= mmu_addr_i;
				wishbone_we_o <= `WriteDisable;
				wishbone_select_o <= mmu_select_i;
			end else if (memw_ack == `False_v) begin
				wishbone_data_o <= mem_wdata;
				wishbone_addr_o <= mmu_addr_i;
				wishbone_we_o <= `WriteEnable;
				wishbone_select_o <= mmu_select_i;
			end else begin
				wishbone_data_o <= `ZeroWord;
				wishbone_addr_o <= mmu_addr_i;
				wishbone_we_o <= `WriteDisable;
				wishbone_select_o <= mmu_select_i;
			end
		end
	end

	always @ (*) begin
		if ((rst == `RstEnable) || (flush_i == `True_v)) begin
			tlb_ce <= `ChipDisable;
			tlb_write_o <= `False_v;
			tlb_addr_o <= `ZeroWord;
		end else begin
			if (if_ack == `False_v) begin
				tlb_ce <= `ChipEnable;
				tlb_write_o <= `False_v;
				tlb_addr_o <= if_addr_i;
			end else if (memr_ack == `False_v) begin
				tlb_ce <= `ChipEnable;
				tlb_write_o <= `False_v;
				tlb_addr_o <= mem_addr_i;
			end else if (memw_ack == `False_v) begin
				tlb_ce <= `ChipEnable;
				tlb_write_o <= `True_v;
				tlb_addr_o <= mem_addr_i;
			end else begin
				tlb_ce <= `ChipEnable;
				tlb_write_o <= `False_v;
				tlb_addr_o <= if_addr_i;
			end
		end
	end

	always @ (posedge clk) begin
		if ((rst == `RstEnable) || (flush_i == `True_v)) begin
			if_ack <= `True_v;
			memw_ack <= `True_v;
			memr_ack <= `True_v;
		end else begin
			if (if_ack == `False_v) begin
				if_ack <= wishbone_ack_i;
				if (!(memr_ack == `False_v || memw_ack == `False_v)) begin
					mem_wdata <= mem_data_i;
				end
			end else if (memr_ack == `False_v) begin
				memr_ack <= wishbone_ack_i;
				if (wishbone_ack_i == `True_v) begin
					if (memw_ack == `True_v) begin
						mem_wdata <= mem_data_i;
					end
					if (mem_sel_i != 4'b1111) begin
						if (mem_sel_i[3] == 1'b0) begin
							mem_wdata[31:24] <= wishbone_data_i[31:24];
						end
						if (mem_sel_i[2] == 1'b0) begin
							mem_wdata[23:16] <= wishbone_data_i[23:16];
						end
						if (mem_sel_i[1] == 1'b0) begin
							mem_wdata[15:8] <= wishbone_data_i[15:8];
						end
						if (mem_sel_i[0] == 1'b0) begin
							mem_wdata[7:0] <= wishbone_data_i[7:0];
						end
					end
				end
			end else if (memw_ack == `False_v) begin
				memw_ack <= wishbone_ack_i;
			end
		end

		if (stall_req_mem == `NoStop) begin
			if (if_ce_i <= `ChipEnable) begin
				if_ack <= `False_v;
			end else begin
				if_ack <= `True_v;
			end
			if (mem_ce_i == `ChipEnable) begin
				if (mem_we_i == `WriteEnable) begin
					memw_ack <= `False_v;
					if (mem_sel_i == 4'b1111) begin
						memr_ack <= `True_v;
					end else begin								//如果只写部分字节，需要先读后写
						memr_ack <= `False_v;
					end
				end else begin
					memw_ack <= `True_v;
					memr_ack <= `False_v;
				end
			end else begin
				memw_ack <= `True_v;
				memr_ack <= `True_v;
			end
		end
	end

	always @ (*) begin
		if ((rst == `RstEnable) || (flush_i == `True_v)) begin
			if_data_o <= `ZeroWord;
			mem_data_o <= `ZeroWord;
		end else begin
			if_data_o <= `ZeroWord;
			mem_data_o <= `ZeroWord;
			if (if_ack == `False_v) begin
				if (wishbone_ack_i == `True_v) begin
					if_data_o <= wishbone_data_i;
				end
			end else begin
				if (wishbone_ack_i == `True_v) begin
					mem_data_o <= wishbone_data_i;
				end
			end
		end
	end

	always @ (*) begin
		stall_req_if <= `NoStop;
		if ((rst == `RstEnable) || (flush_i == `True_v)) begin
			stall_req_mem <= `NoStop;
		end else begin
			if (if_ack == `False_v) begin
				if (memr_ack == `False_v || memw_ack == `False_v) begin
					stall_req_mem <= `Stop;
				end else begin
					stall_req_mem <= `NoStop;
				end
			end else if (memr_ack == `False_v) begin
				stall_req_mem <= `Stop;
				if (wishbone_ack_i == `True_v) begin
					if (memw_ack == `False_v) begin
						stall_req_mem <= `Stop;
					end else begin
						stall_req_mem <= `NoStop;
					end
				end
			end else if (memw_ack == `False_v) begin
				stall_req_mem <= `Stop;
				if (wishbone_ack_i == `True_v) begin
					stall_req_mem <= `NoStop;
				end
			end else begin
				stall_req_mem <= `NoStop;
			end
		end

		if (stall_req_mem == `NoStop) begin
			if (mem_ce_i == `ChipEnable) begin
				stall_req_mem <= `Stop;
			end
		end
	end

endmodule
